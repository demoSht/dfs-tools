#!/usr/bin/env python3
"""
Script d'installation des d√©pendances pour Dofus Tools
"""

import subprocess
import sys
import os
from pathlib import Path

def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"   ‚úÖ {description} r√©ussi")
            return True
        else:
            print(f"   ‚ùå {description} √©chou√©: {result.stderr}")
            return False
    except Exception as e:
        print(f"   ‚ùå Erreur {description}: {e}")
        return False

def install_python_packages():
    """Installe les packages Python requis"""
    print("üì¶ Installation des packages Python...")

    requirements_file = Path(__file__).parent / "requirements.txt"
    if not requirements_file.exists():
        print("‚ùå Fichier requirements.txt introuvable")
        return False

    # Installer les d√©pendances de base
    basic_packages = [
        "scapy>=2.5.0",
        "psutil>=5.9.0",
        "requests>=2.28.0",
        "python-dateutil>=2.8.0"
    ]

    print("üìã Installation des packages de base...")
    for package in basic_packages:
        run_command(f"{sys.executable} -m pip install '{package}'", f"Installation de {package.split('>=')[0]}")

    # Installer mitmproxy s√©par√©ment (peut √™tre probl√©matique)
    print("\nüîê Installation de mitmproxy...")
    if not run_command(f"{sys.executable} -m pip install mitmproxy>=10.0.0", "Installation de mitmproxy"):
        print("‚ö†Ô∏è  mitmproxy a √©chou√© - l'interception SSL ne sera pas disponible")

    # Installer PySide6 s√©par√©ment (optionnel pour GUI)
    print("\nüñ•Ô∏è  Installation de PySide6 (interface graphique)...")
    if not run_command(f"{sys.executable} -m pip install PySide6>=6.4.0", "Installation de PySide6"):
        print("‚ö†Ô∏è  PySide6 a √©chou√© - l'interface graphique ne sera pas disponible")

    # Installer keyboard (pour les raccourcis globaux)
    print("\n‚å®Ô∏è  Installation de keyboard...")
    if not run_command(f"{sys.executable} -m pip install keyboard>=0.13.5", "Installation de keyboard"):
        print("‚ö†Ô∏è  keyboard a √©chou√© - les raccourcis globaux ne seront pas disponibles")

    # Packages optionnels pour l'analyse
    optional_packages = [
        "numpy>=1.21.0",
        "pandas>=1.3.0",
        "netifaces>=0.11.0"
    ]

    print("\nüìä Installation des packages d'analyse (optionnels)...")
    for package in optional_packages:
        run_command(f"{sys.executable} -m pip install '{package}'", f"Installation de {package.split('>=')[0]}")

def check_system_requirements():
    """V√©rifie les pr√©requis syst√®me"""
    print("üîç V√©rification des pr√©requis syst√®me...")

    # V√©rifier Python version
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7+ requis")
        return False
    else:
        print(f"   ‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")

    # V√©rifier les privil√®ges (important pour la capture r√©seau)
    if os.name == 'posix':  # Unix/Linux/macOS
        if os.geteuid() == 0:
            print("   ‚úÖ Privil√®ges root d√©tect√©s (requis pour capture r√©seau)")
        else:
            print("   ‚ö†Ô∏è  Pas de privil√®ges root - la capture r√©seau n√©cessitera sudo")

    return True

def test_installation():
    """Teste l'installation"""
    print("\nüß™ Test de l'installation...")

    tests = [
        ("scapy", "from scapy.all import sniff"),
        ("psutil", "import psutil"),
        ("mitmproxy", "from mitmproxy import http"),
        ("PySide6", "import PySide6"),
        ("keyboard", "import keyboard")
    ]

    for name, import_cmd in tests:
        try:
            exec(import_cmd)
            print(f"   ‚úÖ {name} fonctionne")
        except ImportError:
            print(f"   ‚ùå {name} non disponible")
        except Exception as e:
            print(f"   ‚ö†Ô∏è  {name} probl√®me: {e}")

def show_usage():
    """Affiche les instructions d'utilisation"""
    print("\nüéÆ Instructions d'utilisation:")
    print("=" * 50)
    print()

    print("üì° Pour capturer le trafic Dofus uniquement:")
    print("   sudo python3 launcher.py --traffic-only")
    print()

    print("üîê Pour capturer avec interception SSL:")
    print("   sudo python3 launcher.py --traffic-only --ssl")
    print()

    print("üéÆ Pour lancer tous les outils Dofus:")
    print("   sudo python3 launcher.py --traffic --ssl")
    print()

    print("‚ö†Ô∏è  Notes importantes:")
    print("   - sudo est requis pour la capture r√©seau")
    print("   - Configurez votre proxy sur localhost:8080 pour SSL")
    print("   - Installez le certificat mitmproxy depuis http://mitm.it/")
    print()

def main():
    print("üöÄ Installation des d√©pendances Dofus Tools")
    print("=" * 50)
    print()

    # V√©rifier les pr√©requis
    if not check_system_requirements():
        print("‚ùå Pr√©requis syst√®me non satisfaits")
        return 1

    print()

    # Installer les packages Python
    install_python_packages()

    print()

    # Tester l'installation
    test_installation()

    # Afficher les instructions
    show_usage()

    print("‚úÖ Installation termin√©e !")
    print("üéØ Vous pouvez maintenant utiliser les outils Dofus")

    return 0

if __name__ == "__main__":
    sys.exit(main())